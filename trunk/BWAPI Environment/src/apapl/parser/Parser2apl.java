/* Generated By:JavaCC: Do not edit this line. Parser2apl.java */
package apapl.parser;

import apapl.UnboundedVarException;
import apapl.data.*;
import apapl.program.*;
import apapl.plans.*;
import apapl.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.File;


public class Parser2apl implements Parser2aplConstants {

  final public void Program(APLModule m, LinkedList<File> files) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLHEAD:
      case CAPSHEAD:
      case GBHEAD:
      case GPRULEHEAD:
      case PRRULEHEAD:
      case PCRULEHEAD:
      case PLANHEAD:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Base(m,files);
    }
    jj_consume_token(0);
  }

  final public void Base(APLModule m, LinkedList<File> files) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLHEAD:
      jj_consume_token(INCLHEAD);
      Include(files);
      break;
    case CAPSHEAD:
      jj_consume_token(CAPSHEAD);
      BeliefUpdates(m.getBeliefUpdates());
      break;
    case GBHEAD:
      jj_consume_token(GBHEAD);
      Goalbase(m.getGoalbase(), m);
      break;
    case PLANHEAD:
      jj_consume_token(PLANHEAD);
      Planbase(m.getPlanbase(), m);
      break;
    case GPRULEHEAD:
      jj_consume_token(GPRULEHEAD);
      PGrulebase(m.getPGrulebase());
      break;
    case PRRULEHEAD:
      jj_consume_token(PRRULEHEAD);
      PRrulebase(m.getPRrulebase());
      break;
    case PCRULEHEAD:
      jj_consume_token(PCRULEHEAD);
      PCrulebase(m.getPCrulebase());
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* OBSOLETE
void Environments (LinkedList<String> environments) :
{String e;}
{
	e = AnyName() {environments.add(e);}
	(<COMMA> e = AnyName() {environments.add(e);})*
}
*/
  final public String AnyName() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
                     {if (true) return t.toString();}
      break;
    case NUM:
      t = jj_consume_token(NUM);
                   {if (true) return t.toString();}
      break;
    case NUMNAME:
      t = jj_consume_token(NUMNAME);
                       {if (true) return t.toString();}
      break;
    case NAMEDOT:
      t = jj_consume_token(NAMEDOT);
                       {if (true) return t.toString();}
      break;
    case B:
    case G:
    case VARNAME:
      t = Variable();
                        {if (true) return t.toString();}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token Variable() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARNAME:
      t = jj_consume_token(VARNAME);
                       {if (true) return t;}
      break;
    case B:
      t = jj_consume_token(B);
                 {if (true) return t;}
      break;
    case G:
      t = jj_consume_token(G);
                 {if (true) return t;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Filename() throws ParseException {
 Token t;
    t = jj_consume_token(FILENAME);
         {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void Include(LinkedList<File> i) throws ParseException {
 String s;
    s = Filename();
                         i.add(new java.io.File(s));
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      s = Filename();
                                 i.add(new java.io.File(s));
    }
  }

  final public void BeliefUpdates(BeliefUpdates caps) throws ParseException {
 BeliefUpdate c;
    label_3:
    while (true) {
      c = BeliefUpdate();
                             caps.addRule(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCL:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
  }

  final public BeliefUpdate BeliefUpdate() throws ParseException {
 Query q=null; APLFunction m; ArrayList<Literal> l;
    jj_consume_token(ACCL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case TRUE:
    case B:
    case G:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      q = Query();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(ACCR);
    m = BeliefUpdateAction();
    jj_consume_token(ACCL);
    l = Literals();
    jj_consume_token(ACCR);
                if (q==null) q = new True();
                {if (true) return new BeliefUpdate(q,m,l);}
    throw new Error("Missing return statement in function");
  }

  final public void Goalbase(Goalbase goals, APLModule m) throws ParseException {
        Goal g;
    g = Goal();
                try {g.unvar(); goals.assertGoal(g);}
                catch (UnboundedVarException e) {{if (true) throw new ParseException("Goal "+g+" is not grounded.");}}
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      g = Goal();
                        try {g.unvar(); goals.assertGoal(g);}
                        catch (UnboundedVarException e) {{if (true) throw new ParseException("Goal "+g+" is not grounded.");}}
    }
  }

  final public Goal Goal() throws ParseException {
 Goal g = new Goal(); Literal l;
    l = LiteralBody(true);
                               g.addLiteral(l);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      l = LiteralBody(true);
                                      g.addLiteral(l);
    }
                                                           {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

  final public Query GoalQuery() throws ParseException {
 Query q;
    q = Query();
                if (q.containsNots()) {if (true) throw new ParseException("Goalquery "+q+" contains negative goals. That's not allowed");}
                else {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public void Planbase(Planbase plans, APLModule m) throws ParseException {
        PlanSeq p;
    p = PlanSeq();
                       plans.addPlan(p);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      p = PlanSeq();
                                plans.addPlan(p);
    }
  }

  final public PlanSeq PlanSeq() throws ParseException {
 PlanSeq p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case TRUE:
    case IF:
    case WHILE:
    case SKIPPLAN:
    case SEND:
    case PRINT:
    case CREATE:
    case CLONE:
    case RELEASE:
    case GOALACTION:
    case B:
    case G:
    case GE:
    case P:
    case AT:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      p = UnBracedPlanSeq();
                               {if (true) return p;}
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_1(2147483647)) {
        jj_consume_token(ACCL);
        p = UnBracedPlanSeq();
        jj_consume_token(ACCR);
                                             {if (true) return  p;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PlanSeq UnBracedPlanSeq() throws ParseException {
 Plan p; PlanSeq pl = new PlanSeq();
    p = Plan();
                    pl.addPlan(p);
    label_7:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(DOTCOMMA);
      p = Plan();
                                       pl.addPlan(p);
    }
         {if (true) return pl;}
    throw new Error("Missing return statement in function");
  }

  final public PlanSeq PlanSeqWithVar() throws ParseException {
 PlanSeq p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case TRUE:
    case IF:
    case WHILE:
    case SKIPPLAN:
    case SEND:
    case PRINT:
    case CREATE:
    case CLONE:
    case RELEASE:
    case GOALACTION:
    case B:
    case G:
    case GE:
    case P:
    case AT:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      p = UnBracedPlanSeqWithVar();
                                      {if (true) return p;}
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_3(2147483647)) {
        jj_consume_token(ACCL);
        p = UnBracedPlanSeqWithVar();
        jj_consume_token(ACCR);
                                                    {if (true) return  p;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PlanSeq UnBracedPlanSeqWithVar() throws ParseException {
 Plan p; PlanSeq pl = new PlanSeq();
    p = PlanWithVar();
                           pl.addPlan(p);
    label_8:
    while (true) {
      if (jj_2_4(2147483647)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(DOTCOMMA);
      p = PlanWithVar();
                                              pl.addPlan(p);
    }
         {if (true) return pl;}
    throw new Error("Missing return statement in function");
  }

  final public Plan PlanWithVar() throws ParseException {
 Plan p; APLFunction af;
    if (jj_2_5(2147483647)) {
      p = ExecuteModuleAction();
                                   {if (true) return p;}
    } else if (jj_2_6(2147483647)) {
      p = UpdateBeliefbaseAction();
                                      {if (true) return p;}
    } else if (jj_2_7(2147483647)) {
      p = TestAction();
                          {if (true) return p;}
    } else if (jj_2_8(2147483647)) {
      p = GoalAction();
                          {if (true) return p;}
    } else if (jj_2_9(2147483647)) {
      p = ChunkPlanWithVar();
                                {if (true) return p;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        af = PlanAtom();
                         {if (true) return new AbstractAction(af);}
        break;
      case SEND:
        p = SendAction();
                          {if (true) return p;}
        break;
      default:
        jj_la1[12] = jj_gen;
        if (jj_2_10(2147483647)) {
          af = BeliefUpdateAction();
                                   {if (true) return new BeliefUpdateAction(af);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SKIPPLAN:
            jj_consume_token(SKIPPLAN);
                    {if (true) return new Skip();}
            break;
          case PRINT:
            p = PrintAction();
                           {if (true) return p;}
            break;
          case AT:
            p = ExternalAction();
                              {if (true) return p;}
            break;
          case CREATE:
            p = CreateModuleAction();
                                  {if (true) return p;}
            break;
          case CLONE:
            p = CloneModuleAction();
                                 {if (true) return p;}
            break;
          case RELEASE:
            p = ReleaseModuleAction();
                                   {if (true) return p;}
            break;
          case WHILE:
            p = WhilePlanWithVar();
                                {if (true) return p;}
            break;
          case IF:
            p = ConditionalPlanWithVar();
                                      {if (true) return p;}
            break;
          case B:
          case G:
          case VARNAME:
            p = PlanVariable();
                            {if (true) return p;}
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Plan PlanVariable() throws ParseException {
 Token t;
    t = Variable();
                        {if (true) return new PlanVariable(t.toString());}
    throw new Error("Missing return statement in function");
  }

  final public Plan Plan() throws ParseException {
 Plan p; APLFunction af;
    if (jj_2_11(2147483647)) {
      p = ExecuteModuleAction();
                                   {if (true) return p;}
    } else if (jj_2_12(2147483647)) {
      p = UpdateBeliefbaseAction();
                                      {if (true) return p;}
    } else if (jj_2_13(2147483647)) {
      p = TestAction();
                          {if (true) return p;}
    } else if (jj_2_14(2147483647)) {
      p = GoalAction();
                          {if (true) return p;}
    } else if (jj_2_15(2147483647)) {
      p = ChunkPlan();
                         {if (true) return p;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        af = PlanAtom();
                         {if (true) return new AbstractAction(af);}
        break;
      case SEND:
        p = SendAction();
                          {if (true) return p;}
        break;
      case B:
      case G:
      case VARNAME:
        af = BeliefUpdateAction();
                                   {if (true) return new BeliefUpdateAction(af);}
        break;
      case SKIPPLAN:
        jj_consume_token(SKIPPLAN);
                    {if (true) return new Skip();}
        break;
      case PRINT:
        p = PrintAction();
                           {if (true) return p;}
        break;
      case AT:
        p = ExternalAction();
                              {if (true) return p;}
        break;
      case CREATE:
        p = CreateModuleAction();
                                  {if (true) return p;}
        break;
      case CLONE:
        p = CloneModuleAction();
                                 {if (true) return p;}
        break;
      case RELEASE:
        p = ReleaseModuleAction();
                                   {if (true) return p;}
        break;
      case WHILE:
        p = WhilePlan();
                         {if (true) return p;}
        break;
      case IF:
        p = ConditionalPlan();
                               {if (true) return p;}
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public APLFunction BeliefUpdateAction() throws ParseException {
 APLFunction af; Token n; ArrayList<Term> p=null;
    n = Variable();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case B:
    case G:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      p = Params();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                if (p==null) p = new ArrayList<Term>();
                {if (true) return new APLFunction(n.toString(),p);}
    throw new Error("Missing return statement in function");
  }

  final public SendAction SendAction() throws ParseException {
 Term receiver, performative, language=null, ontology=null; Term content;
    jj_consume_token(SEND);
    jj_consume_token(LBRACE);
    receiver = IV();
    jj_consume_token(COMMA);
    performative = IV();
    jj_consume_token(COMMA);
    if (jj_2_16(2147483647)) {
      language = IV();
      jj_consume_token(COMMA);
      ontology = IV();
      jj_consume_token(COMMA);
    } else {
      ;
    }
    content = FunctionIdent();
    jj_consume_token(RBRACE);
                if (language==null&&ontology==null)
                        {if (true) return new SendAction(receiver,performative,content);}
                else
                        {if (true) return new SendAction(receiver,performative,language,ontology,content);}
    throw new Error("Missing return statement in function");
  }

  final public PrintAction PrintAction() throws ParseException {
 PrintAction a; Term t;
    jj_consume_token(PRINT);
    jj_consume_token(LBRACE);
    t = Term();
    jj_consume_token(RBRACE);
         {if (true) return new PrintAction(t);}
    throw new Error("Missing return statement in function");
  }

  final public CreateModuleAction CreateModuleAction() throws ParseException {
 APLIdent specification; APLIdent identifier;
    jj_consume_token(CREATE);
    jj_consume_token(LBRACE);
    specification = APLIdent();
    jj_consume_token(COMMA);
    identifier = APLIdent();
    jj_consume_token(RBRACE);
         {if (true) return new CreateModuleAction(specification, identifier);}
    throw new Error("Missing return statement in function");
  }

  final public CloneModuleAction CloneModuleAction() throws ParseException {
 APLIdent model; APLIdent identifier;
    jj_consume_token(CLONE);
    jj_consume_token(LBRACE);
    model = APLIdent();
    jj_consume_token(COMMA);
    identifier = APLIdent();
    jj_consume_token(RBRACE);
         {if (true) return new CloneModuleAction(model, identifier);}
    throw new Error("Missing return statement in function");
  }

  final public ReleaseModuleAction ReleaseModuleAction() throws ParseException {
 APLIdent identifier;
    jj_consume_token(RELEASE);
    jj_consume_token(LBRACE);
    identifier = APLIdent();
    jj_consume_token(RBRACE);
         {if (true) return new ReleaseModuleAction(identifier);}
    throw new Error("Missing return statement in function");
  }

  final public ExecuteModuleAction ExecuteModuleAction() throws ParseException {
 Test condition; APLIdent moduleId;
    moduleId = ModuleIdent();
    jj_consume_token(DOT);
    jj_consume_token(EXECUTE);
    jj_consume_token(LBRACE);
    condition = TestConjunction();
    jj_consume_token(RBRACE);
         {if (true) return new ExecuteModuleAction(moduleId, condition);}
    throw new Error("Missing return statement in function");
  }

  final public UpdateBeliefbaseAction UpdateBeliefbaseAction() throws ParseException {
 ArrayList<Literal> literals; APLIdent moduleId;
    moduleId = ModuleIdent();
    jj_consume_token(DOT);
    jj_consume_token(UPDATEBB);
    jj_consume_token(LBRACE);
    literals = Literals();
    jj_consume_token(RBRACE);
         {if (true) return new UpdateBeliefbaseAction(moduleId, literals);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalAction ExternalAction() throws ParseException {
 Token env; Term timeout = new APLNum(0); APLFunction action; APLVar result = new APLVar();
    jj_consume_token(AT);
    env = jj_consume_token(IDENT);
    jj_consume_token(LBRACE);
    action = PlanAtom();
    if (jj_2_17(2147483647)) {
      jj_consume_token(COMMA);
      result = APLVar();
    } else {
      ;
    }
    if (jj_2_18(2147483647)) {
      jj_consume_token(COMMA);
      timeout = NumVar();
    } else {
      ;
    }
    jj_consume_token(RBRACE);
                {if (true) return new ExternalAction(env.toString(),action,result,timeout);}
    throw new Error("Missing return statement in function");
  }

  final public ChunkPlan ChunkPlan() throws ParseException {
 Plan p; ChunkPlan cp = new ChunkPlan();
    jj_consume_token(LISTL);
    p = Plan();
                    cp.addPlan(p);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOTCOMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      jj_consume_token(DOTCOMMA);
      p = Plan();
                                cp.addPlan(p);
    }
    jj_consume_token(LISTR);
         {if (true) return cp;}
    throw new Error("Missing return statement in function");
  }

  final public ChunkPlan ChunkPlanWithVar() throws ParseException {
 Plan p; ChunkPlan cp = new ChunkPlan();
    jj_consume_token(LISTL);
    p = PlanWithVar();
                           cp.addPlan(p);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOTCOMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      jj_consume_token(DOTCOMMA);
      p = PlanWithVar();
                                       cp.addPlan(p);
    }
    jj_consume_token(LISTR);
         {if (true) return cp;}
    throw new Error("Missing return statement in function");
  }

  final public PlanSeq ScopePlan() throws ParseException {
 PlanSeq ps; Plan p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACCL:
      jj_consume_token(ACCL);
      ps = PlanSeq();
      jj_consume_token(ACCR);
                                      {if (true) return ps;}
      break;
    case NOT:
    case TRUE:
    case IF:
    case WHILE:
    case SKIPPLAN:
    case SEND:
    case PRINT:
    case CREATE:
    case CLONE:
    case RELEASE:
    case GOALACTION:
    case B:
    case G:
    case GE:
    case P:
    case AT:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      p = Plan();
                    ps = new PlanSeq(); ps.addPlan(p); {if (true) return ps;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PlanSeq ScopePlanWithVar() throws ParseException {
 PlanSeq ps; Plan p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACCL:
      jj_consume_token(ACCL);
      ps = PlanSeqWithVar();
      jj_consume_token(ACCR);
                                             {if (true) return ps;}
      break;
    case NOT:
    case TRUE:
    case IF:
    case WHILE:
    case SKIPPLAN:
    case SEND:
    case PRINT:
    case CREATE:
    case CLONE:
    case RELEASE:
    case GOALACTION:
    case B:
    case G:
    case GE:
    case P:
    case AT:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      p = PlanWithVar();
                           ps = new PlanSeq(); ps.addPlan(p); {if (true) return ps;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionalPlan ConditionalPlan() throws ParseException {
 Test condition; PlanSeq thenPlan; PlanSeq elsePlan=null;
    jj_consume_token(IF);
    condition = TestConjunction();
    jj_consume_token(THEN);
    thenPlan = ScopePlan();
    if (jj_2_19(2147483647)) {
      jj_consume_token(ELSE);
      elsePlan = ScopePlan();
    } else {
      ;
    }
                if (elsePlan==null) elsePlan= new PlanSeq();
                {if (true) return new ConditionalPlan(condition,thenPlan,elsePlan);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalPlan ConditionalPlanWithVar() throws ParseException {
 Test condition; PlanSeq thenPlan; PlanSeq elsePlan=null;
    jj_consume_token(IF);
    condition = TestConjunction();
    jj_consume_token(THEN);
    thenPlan = ScopePlanWithVar();
    if (jj_2_20(2147483647)) {
      jj_consume_token(ELSE);
      elsePlan = ScopePlanWithVar();
    } else {
      ;
    }
                if (elsePlan==null) elsePlan= new PlanSeq();
                {if (true) return new ConditionalPlan(condition,thenPlan,elsePlan);}
    throw new Error("Missing return statement in function");
  }

  final public GoalAction GoalAction() throws ParseException {
 Goal g; Token t; APLIdent moduleId = null;
    if (jj_2_21(2147483647)) {
      moduleId = ModuleIdent();
      jj_consume_token(DOT);
    } else {
      ;
    }
    t = jj_consume_token(GOALACTION);
    jj_consume_token(LBRACE);
    g = Goal();
    jj_consume_token(RBRACE);
         {if (true) return new GoalAction(moduleId, t.toString(),g);}
    throw new Error("Missing return statement in function");
  }

  final public TestAction TestAction() throws ParseException {
        Test test, test2;
        Query q;
    if (jj_2_22(2147483647)) {
      q = Query();
      jj_consume_token(76);
                         {if (true) return new TestAction(new BeliefTest(null, q));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case B:
      case G:
      case GE:
      case P:
      case IDENT:
      case QUOTE:
        test = TestConjunction();
         {if (true) return new TestAction(test);}
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Test TestConjunction() throws ParseException {
        Test test, test2;
        Query q;
    test = Test();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TESTAND:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      jj_consume_token(TESTAND);
      test2 = Test();
                                   test.addLast(test2);
    }
         {if (true) return test;}
    throw new Error("Missing return statement in function");
  }

  final public Test Test() throws ParseException {
 APLIdent moduleId = null; Test t;
    if (jj_2_23(2147483647)) {
      moduleId = ModuleIdent();
      jj_consume_token(DOT);
    } else {
      ;
    }
    if (jj_2_24(2147483647)) {
      t = BeliefTest(moduleId);
                                                  {if (true) return t;}
    } else if (jj_2_25(2147483647)) {
      t = GoalTest(moduleId);
                                                {if (true) return t;}
    } else if (jj_2_26(2147483647)) {
      t = GoalTestExact(moduleId);
                                                     {if (true) return t;}
    } else if (jj_2_27(2147483647)) {
      t = PlanTest(moduleId);
                                                 {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public GoalTest GoalTest(APLIdent moduleId) throws ParseException {
 Query q;
    jj_consume_token(G);
    jj_consume_token(LBRACE);
    q = GoalQuery();
    jj_consume_token(RBRACE);
                                               {if (true) return new GoalTest(moduleId, q);}
    throw new Error("Missing return statement in function");
  }

  final public GoalTestExact GoalTestExact(APLIdent moduleId) throws ParseException {
 Query q;
    jj_consume_token(GE);
    jj_consume_token(LBRACE);
    q = GoalQuery();
    jj_consume_token(RBRACE);
                                                {if (true) return new GoalTestExact(moduleId, q);}
    throw new Error("Missing return statement in function");
  }

  final public BeliefTest BeliefTest(APLIdent moduleId) throws ParseException {
 Query q;
    jj_consume_token(B);
    jj_consume_token(LBRACE);
    q = Query();
    jj_consume_token(RBRACE);
                                           {if (true) return new BeliefTest(moduleId, q);}
    throw new Error("Missing return statement in function");
  }

  final public PlanTest PlanTest(APLIdent moduleId) throws ParseException {
 Query q;
    jj_consume_token(P);
    jj_consume_token(LBRACE);
    q = PlanQuery();
    jj_consume_token(RBRACE);
                                               {if (true) return new PlanTest(moduleId, q);}
    throw new Error("Missing return statement in function");
  }

  final public WhilePlan WhilePlan() throws ParseException {
 Test condition; PlanSeq plan;
    jj_consume_token(WHILE);
    condition = TestConjunction();
    jj_consume_token(DO);
    plan = ScopePlan();
         {if (true) return new WhilePlan(condition,plan);}
    throw new Error("Missing return statement in function");
  }

  final public WhilePlan WhilePlanWithVar() throws ParseException {
 Test condition; PlanSeq plan;
    jj_consume_token(WHILE);
    condition = TestConjunction();
    jj_consume_token(DO);
    plan = ScopePlanWithVar();
         {if (true) return new WhilePlan(condition,plan);}
    throw new Error("Missing return statement in function");
  }

  final public Term NameVar() throws ParseException {
 Token s; Term t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case QUOTE:
      t = APLIdent();
                         {if (true) return t;}
      break;
    case NUMNAME:
      s = jj_consume_token(NUMNAME);
                         {if (true) return new APLIdent(s.toString());}
      break;
    case NAMEDOT:
      s = jj_consume_token(NAMEDOT);
                         {if (true) return new APLIdent(s.toString());}
      break;
    case B:
    case G:
    case UNDERSCORE:
    case VARNAME:
      t = APLVar();
                         {if (true) return t;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term NumVar() throws ParseException {
 Term t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case SIGN:
    case NUM:
      t = APLNum();
                       {if (true) return t;}
      break;
    case B:
    case G:
    case UNDERSCORE:
    case VARNAME:
      t = APLVar();
                      {if (true) return t;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void PCrulebase(PCrulebase pcrules) throws ParseException {
 PCrule pcrule;
    label_12:
    while (true) {
      pcrule = PCrule();
                            pcrules.addRule(pcrule);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_12;
      }
    }
  }

  final public PCrule PCrule() throws ParseException {
 APLFunction head; Query guard; PlanSeq body;
    head = PlanAtom();
    jj_consume_token(LEFTARROW);
    guard = Query();
    jj_consume_token(VERT);
    body = PlanSeq();
         {if (true) return new PCrule(head,guard,body);}
    throw new Error("Missing return statement in function");
  }

  final public void PGrulebase(PGrulebase pgrules) throws ParseException {
 PGrule pgrule;
    label_13:
    while (true) {
      pgrule = PGrule();
                            pgrules.addRule(pgrule);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case B:
      case G:
      case UNDERSCORE:
      case LBRACE:
      case LISTL:
      case LEFTARROW:
      case DOT:
      case SIGN:
      case IDENT:
      case VARNAME:
      case NUM:
      case QUOTE:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_13;
      }
    }
  }

  final public PGrule PGrule() throws ParseException {
 Query head; Query guard; PlanSeq body;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case TRUE:
    case B:
    case G:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      head = Query();
      jj_consume_token(LEFTARROW);
      guard = Query();
      jj_consume_token(VERT);
      body = PlanSeq();
         {if (true) return new PGrule(head,guard,body);}
      break;
    case LEFTARROW:
      jj_consume_token(LEFTARROW);
      guard = Query();
      jj_consume_token(VERT);
      body = PlanSeq();
         {if (true) return new PGrule(new True(),guard,body);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void PRrulebase(PRrulebase prrules) throws ParseException {
 PRrule prrule;
    label_14:
    while (true) {
      prrule = PRrule();
                            prrules.addRule(prrule);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case IF:
      case WHILE:
      case SKIPPLAN:
      case SEND:
      case PRINT:
      case CREATE:
      case CLONE:
      case RELEASE:
      case GOALACTION:
      case B:
      case G:
      case GE:
      case P:
      case AT:
      case UNDERSCORE:
      case LBRACE:
      case LISTL:
      case ACCL:
      case DOT:
      case SIGN:
      case IDENT:
      case VARNAME:
      case NUM:
      case QUOTE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_14;
      }
    }
  }

  final public PRrule PRrule() throws ParseException {
 PlanSeq head; Query guard=null; PlanSeq body;
    head = PlanSeqWithVar();
    jj_consume_token(LEFTARROW);
    guard = Query();
    jj_consume_token(VERT);
    body = PlanSeqWithVar();
         {if (true) return new PRrule(head,guard,body);}
    throw new Error("Missing return statement in function");
  }

  final public APLIdent APLIdent() throws ParseException {
 Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      s = jj_consume_token(IDENT);
                     {if (true) return new APLIdent(s.toString());}
      break;
    case QUOTE:
      s = jj_consume_token(QUOTE);
                     {if (true) return new APLIdent(s.toString().substring(1, s.toString().length() - 1), true);}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Query PlanQuery() throws ParseException {
 Query q;
    q = Query();
                if (q.containsNots())
                        {if (true) throw new ParseException("Plan query "+q+" contains negative literals. That is not allowed");}
                else
                        {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public Query Query() throws ParseException {
 Query w,v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                {if (true) return new True();}
      break;
    default:
      jj_la1[29] = jj_gen;
      if (jj_2_28(2147483647)) {
        w = Query2();
        v = QueryRHS(w);
                                                                     {if (true) return v;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case B:
        case G:
        case UNDERSCORE:
        case LBRACE:
        case LISTL:
        case DOT:
        case SIGN:
        case IDENT:
        case VARNAME:
        case NUM:
        case QUOTE:
          w = Query2();
                      {if (true) return w;}
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Query QueryRHS(Query u) throws ParseException {
 Query w,v;
    if (jj_2_29(2147483647)) {
      jj_consume_token(OR);
      w = Query2();
      v = QueryRHS(w);
                                           {if (true) return new OrQuery(u,v);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        w = Query2();
                           {if (true) return new OrQuery(u,w);}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Query Query2() throws ParseException {
 Query w,v; Literal l;
    if (jj_2_30(2147483647)) {
      l = Literal();
      w = Query2RHS(l);
                                                                         {if (true) return w;}
    } else if (jj_2_31(2147483647)) {
      l = Literal();
                                            {if (true) return l;}
    } else if (jj_2_32(2147483647)) {
      jj_consume_token(LBRACE);
      w = Query();
      jj_consume_token(RBRACE);
      v = Query2RHS(w);
                                                                                                          {if (true) return v;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        w = Query();
        jj_consume_token(RBRACE);
                                       {if (true) return w;}
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Query Query2RHS(Query u) throws ParseException {
 Query w,v;
    if (jj_2_33(2147483647)) {
      jj_consume_token(AND);
      w = Query2();
      v = Query2RHS(w);
                                                                                    {if (true) return new AndQuery(u,v);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        w = Query2();
                            {if (true) return new AndQuery(u,w);}
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
 Literal l; boolean sign = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                 sign = false;
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    l = LiteralBody(sign);
                               {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Term FunctionIdent() throws ParseException {
 Term a;
    a = Term();
                if (!(a instanceof APLIdent || a instanceof APLFunction ))
                {if (true) throw new ParseException(a + " is not a valid ident or function.");}
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Literal LiteralBody(boolean sign) throws ParseException {
 Term a;
    a = FunctionIdent();
                {if (true) return new Literal(a,sign);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Literal> Literals() throws ParseException {
        ArrayList<Literal> a = new ArrayList<Literal>();
        Literal l;
    l = Literal();
                               a.add(l);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      l = Literal();
                                        a.add(l);
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public APLFunction PlanAtom() throws ParseException {
 Token n; ArrayList<Term> p = new ArrayList<Term>();
    n = jj_consume_token(IDENT);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case B:
    case G:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      p = Params();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                       {if (true) return new APLFunction(n.toString(),p);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Term> Params() throws ParseException {
 ArrayList<Term> a = new ArrayList<Term>(); Term t;
    t = Term();
                            a.add(t);
    label_16:
    while (true) {
      if (jj_2_34(2147483647)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(COMMA);
      t = Term();
                                            a.add(t);
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public APLVar APLVar() throws ParseException {
 Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case B:
    case G:
    case VARNAME:
      s = Variable();
         {if (true) return new APLVar(s.toString());}
      break;
    case UNDERSCORE:
      jj_consume_token(UNDERSCORE);
         {if (true) return new APLVar();}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public APLListVar APLList() throws ParseException {
 LinkedList<Term> head = new LinkedList<Term>(); APLListVar tail = null; Term t;
    jj_consume_token(LISTL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case B:
    case G:
    case UNDERSCORE:
    case LBRACE:
    case LISTL:
    case DOT:
    case SIGN:
    case IDENT:
    case VARNAME:
    case NUM:
    case QUOTE:
      t = Term();
                            head.add(t);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        t = Term();
                                     head.add(t);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERT:
        jj_consume_token(VERT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LISTL:
          tail = APLList();
          break;
        case B:
        case G:
        case UNDERSCORE:
        case VARNAME:
          tail = APLVar();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(LISTR);
                {if (true) return APLList.constructList(head,tail);}
    throw new Error("Missing return statement in function");
  }

  final public int Int() throws ParseException {
 Token n, s = null; int sign = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGN:
      s = jj_consume_token(SIGN);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    n = jj_consume_token(NUM);
                if (s!=null) if (s.toString().equals("-")) sign = -1;
                int i = Integer.parseInt(n.toString());
                {if (true) return sign*i;}
    throw new Error("Missing return statement in function");
  }

  final public APLNum APLNum() throws ParseException {
 String s; Token sign; int j = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGN:
      sign = jj_consume_token(SIGN);
                        j = (sign.toString().equals("-")?-1:1);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    s = Double();
                double i =  Double.parseDouble(s);
                {if (true) return new APLNum(j*i);}
    throw new Error("Missing return statement in function");
  }

  final public String Double() throws ParseException {
 Token a,b;
    if (jj_2_35(2147483647)) {
      a = jj_consume_token(NUM);
      jj_consume_token(DOT);
      b = jj_consume_token(NUM);
                                                                {if (true) return a+"."+b;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        a = jj_consume_token(NUM);
                         {if (true) return "." + a;}
        break;
      case NUM:
        a = jj_consume_token(NUM);
                   {if (true) return "" + a;}
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Term IV() throws ParseException {
 Term t; String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case B:
    case G:
    case UNDERSCORE:
    case VARNAME:
      t = APLVar();
                      {if (true) return t;}
      break;
    case IDENT:
    case QUOTE:
      t = APLIdent();
                        {if (true) return t;}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
APLFunction APLFunction() :
{APLFunction a;}
{
	LOOKAHEAD(<IDENT> <LBRACE>)
	a = APLFunctionNoInfix() {return a;}
|	a = APLFunctionInfix() {return a;}
}

APLFunction APLFunctionInfix() :
{Token n; Term l,r;}
{
	l = Term()
	n = <RELATIONAL>
	r = Term()
	{ return new APLFunction(l,n.toString(),r);}
}*/
  final public APLFunction APLFunction() throws ParseException {
 APLFunction a;
    a = APLFunctionNoInfix();
                                  {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public APLFunction APLFunctionNoInfix() throws ParseException {
 Token n; ArrayList<Term> p = new ArrayList<Term>();
    n = jj_consume_token(IDENT);
    jj_consume_token(LBRACE);
    p = Params();
    jj_consume_token(RBRACE);
                {if (true) return new APLFunction(n.toString(),p);}
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
 Term l, r; Token t;
    l = Term2();
    label_18:
    while (true) {
      if (jj_2_36(2147483647)) {
        ;
      } else {
        break label_18;
      }
      t = jj_consume_token(SIGN);
      r = Term2();
                        l = new APLFunction(l,t.toString(),r);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Term Term2() throws ParseException {
 Term l, r; Token t;
    l = Term3();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
      case 78:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        t = jj_consume_token(77);
        break;
      case 78:
        t = jj_consume_token(78);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      r = Term3();
                        l = new APLFunction(l, t.toString(), r);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Term Term3() throws ParseException {
 Term l, r; Token t;
    l = Term4();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATIONAL:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_20;
      }
      t = jj_consume_token(RELATIONAL);
      r = Term4();
                        l = new APLFunction(l, t.toString(), r);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Term Term4() throws ParseException {
 Term t;
    if (jj_2_37(2147483647)) {
      t = APLFunctionNoInfix();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        t = Term();
        jj_consume_token(RBRACE);
        break;
      case B:
      case G:
      case UNDERSCORE:
      case VARNAME:
        t = APLVar();
        break;
      case LISTL:
        t = APLList();
        break;
      case DOT:
      case SIGN:
      case NUM:
        t = APLNum();
        break;
      case IDENT:
      case QUOTE:
        t = APLIdent();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public APLIdent ModuleIdent() throws ParseException {
 APLIdent ident;
    ident = APLIdent();
                            {if (true) return ident;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(ACCL)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(ACCR)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(DOTCOMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ACCL)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(ACCR)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(ACCL)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(ACCR)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(P)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_176()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(P)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(B)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(G)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(B)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(GE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_175()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(G)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_175()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(RELATIONAL)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(TESTAND)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(G)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(B)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(SIGN)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(SIGN)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(GOALACTION)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_149()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_162()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_147()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(ACCL)) return true;
    if (jj_3R_174()) return true;
    if (jj_scan_token(ACCR)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(ACCL)) return true;
    if (jj_3R_173()) return true;
    if (jj_scan_token(ACCR)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(DOTCOMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(LISTL)) return true;
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LISTR)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(DOTCOMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(LISTL)) return true;
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LISTR)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(SIGN)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(VERT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(UPDATEBB)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(LISTL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    if (jj_scan_token(LISTR)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(RELEASE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(CLONE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(SEND)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_34()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_34()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(SKIPPLAN)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(UPDATEBB)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(EXECUTE)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(SKIPPLAN)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(UPDATEBB)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(DOTCOMMA)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(EXECUTE)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(DOTCOMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(ACCL)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(ACCR)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(DOTCOMMA)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public Parser2aplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ec0000,0x3ec0000,0x0,0x0,0x0,0x0,0x30000000,0x0,0x4000000,0x0,0x70000000,0x70000000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x70000000,0x70000000,0x0,0x0,0x0,0x0,0x0,0x30000000,0x30000000,0x70000000,0x0,0x20000000,0x10000000,0x8000000,0x0,0x4000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x60000,0x60000,0x10000,0x20000000,0x9860000,0x10000,0x0,0x10000,0x9be9f82,0x9be9f82,0x100,0x261e82,0x261f82,0x9860000,0x4000000,0x4000000,0x29be9f82,0x29be9f82,0x1e0000,0x40,0x860000,0x860000,0x0,0x89860000,0x89860000,0x29be9f82,0x0,0x0,0x9860000,0x0,0x1000000,0x0,0x0,0x10000,0x9860000,0x860000,0x10000,0x8860000,0x0,0x9860000,0x0,0x0,0x0,0x860000,0x0,0x0,0x0,0x9860000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1f0,0x20,0x0,0x0,0x479,0x0,0x0,0x0,0x479,0x479,0x10,0x20,0x30,0x479,0x0,0x0,0x479,0x479,0x410,0x0,0x5b0,0x69,0x10,0x479,0x479,0x479,0x410,0x0,0x479,0x0,0x0,0x0,0x0,0x0,0x479,0x20,0x0,0x20,0x200,0x479,0x8,0x8,0x41,0x430,0x6000,0x6000,0x4,0x479,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[37];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser2apl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser2apl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Parser2aplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser2apl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Parser2aplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser2apl(Parser2aplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Parser2aplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 37; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
