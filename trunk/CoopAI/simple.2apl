/*
 * Simple agent by Marc
 * 
 * ------- Initial parameters --------
 * sent to the agent when the game initializes  
 *
 * - basePos(X,Y)
 * - wta(X)				willingness to attack, or aggressiveness
 *
 * ------- Sensing info --------------
 * sent to the agent every tick
 * 
 * 1. WORLD INFORMATION
 * - numUnits(int)
 * - unitsCP(X,Y)     	center point of own units
 * - numEnemyUnits(int)
 * - enemyUnitsCP(X,Y)
 * - enemyBasesPos(X) 	where X is a list of points ([X,Y]) that each define a building of the
 *                  	enemy. For example: enemyBases([0,2],[4,1])
 *
 * 2. EVENTS
 * - unitDestroyed()  	one of own units has been destroyed
 * - unitDiscovered()	an enemy unit has been discovered
 * - buildingAttacked()	#### I DO NOT KNOW WHETHER THIS EVENT EXISTS ###
 */
 
Beliefs:
	/* initialize, because belief updates require this. */
	numUnits(0).
	ownCP(0,0).
	enemyCP(0,0).
	basePos(0,0).
	baseHP(0,0).
	wta(0).
	
BeliefUpdates:
	{numUnits(X)} 		SetUnits(Y)				{not numUnits(X),numUnits(Y)}

	/* CP = Center Point, it is the center of a group of units
	 * enemyCP is a list of points that represent different groups of enemies
	 */
	{ownCP(X,Y)}		SetOwnCP(Xnew,Ynew)		{not ownCP(X,Y),ownCP(Xnew,Ynew)}
	{enemyCP(L)}		SetEnemyCP(Lnew)		{not enemyCP(L),enemyCP(Lnew)}

	{basePos(X,Y)}		SetBasePos(Xnew,Ynew)	{not basePos(X,Y),basePos(Xnew,Ynew)}
	{baseHP(X)}			SetBaseHP(Y)			{not baseHP(X),baseHP(Y)}

	/* character is defined as willingness to attack (WTA), domain [0,10] */
	{wta(X)}			SetWTA(Y)				{not wta(X),wta(Y)}
	
	{numUnits(X)}		DestroyUnit(_)			{not numUnits(X), numUnits(X-1)}
	
Plans:
	/* register with the environment */
	@starcraft(hello(),_)

PC-rules:		
    /* Note the use of a function with parameter as events, since functions with no parameters are not supported. */

	event(units(X), starcraft) <- true | {
		SetUnits(X)
	}
	
	event(ownCP(X,Y), starcraft) <- true | {
		SetOwnCP(X,Y)
	}
	
	event(enemyCP(L), starcraft) <- true | {
		SetEnemyCP(L)
	}
	
	event(basePosition(X,Y), starcraft) <- true | {
		SetBasePos(X,Y)
	}
	
	event(baseHP(X), starcraft) <- true | {
		SetBaseHP(X)
	}
	
	event(wta(X), starcraft) <- true | {
		SetWTA(X)
	}
	
	event(unitDestroyed(_), starcraft) <- numUnits(X) | {
		DestroyUnit(X)
	}
	
	event(nextMove(_), starcraft) <- true | {
		/* implement reasoning here */
		skip
	}