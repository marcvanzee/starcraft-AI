/** The agent is written exactly as explained in the document 
 * "Reasoning cycle" that can be found on Google Docs.
 */
 
/** Includes 
 */

Include: starcraftEvents.2apl
Include: plans.2apl
Include: reasoningCycle.2apl

BeliefUpdates:

/** ---------------------- reasoning cycle ----------------------------------------------------------
 *
 * the reasoning cycle can be found in the flow chart of Google docs
 *
 *
 * ---------------- explanation of beliefs that are used -----------------------------------------
 *
 * the character of the agent is defined as the willingness to attack (WTA) and it is 
 * assigned once when the game starts.
 * 		wta(X), with X € [0,1,..,10]
 *
 * There are two subgoals, which both are assigned a priority at the beginning of each update
 * the winning priority will be the goal that the agent will try to pursue
 * these are the subgoals together with their priority
 * the priority depends on the WTA and the current situation
 * 		subgoal(Subgoal, X), with Subgoal € [attack,defend] and X € [0,1,...,10]
 *
 * beliefs that are assigned to the agent at the beginning of the game and do not change
 * 		baseCP(X,Y)			center point of the base
 * 		numUnits(X)			number of units
 *
 * beliefs that are assigned to the agent are every game update
 * 		unitsCP(X,Y)     	center point of own units
 * 		baseHP(X)			health Points of the own base
 * 		numEnemyUnits(X)	number of enemy units that are currently visible
 * 		enemies(L)			a list that contains the location and the HP of the visible enemies
 *		enemyBases(L)		a list that contains the location and the HP of the visible bases of the enemy
 *
 */


	// initial beliefs, when game starts
	{true} 					SetTeamMate(X) 		{teamMate(X)}
	{true} 					SetWta(X) 			{wta(X), wtaTresholdInUnits(2*X)}
	{true} 					SetUnits(X)			{numUnits(X)}
	{true}					SetBaseCP(X,Y)		{baseCP(X,Y)}									// Pos = [X,Y]
	{true}					SetCoBaseCP(X,Y)		{coBase(X,Y)}
	
	// updated beliefs, when game updates
	{numUnits(X)}			DestroyUnit()		{not numUnits(X), numUnits(X-1)}
	{baseHP(X)}				SetBaseHP(Y)		{not baseHP(X), baseHP(Y)}
	{ownCP(Pos)}			SetOwnCP(PosNew)	{not ownCP(Pos), ownCP(PosNew)}					// Pos,PosNew = [X,Y]
	{numEnemies(X)}			SetNumEnemies(Y)	{not numEnemies(X), numEnemies(Y) }
	{enemies(Pos)}			SetEnemies(PosNew)	{not enemies(Pos), enemies(PosNew)}
	{enemyBases(L)}			SetEnemyBases(Lnew)	{not enemyBases(L), enemyBases(Lnew)}
	
	// other beliefs, for internal processing
	{true}					SetBusy()			{busy}
	{true}					SetIdle()			{not busy}
	{subgoal(X,Y)}			SetSubgoal(X1,Y1)	{not subgoal(X,Y), subgoal(X1,Y1)}
	{curPriority(X)}		RememberPriority(Y)	{not curPriority(X), curPriority(Y)}
	
	{currentPlan(Id,X1,X2)}	SetPlan(IdNew,Y1,Y2){not currentPlan(Id, X1,X2), currentPlan(IdNew, Y1,Y2)}
	{newPlan(X)}			SetNewPlan(X2)		{not newPlan(X), newPlan(X2)}
	{currentPlan(Id,X1,X2)} PlanFinished()		{not currentPlan(Id, X1,X2), currentPlan(0,[],0)}
	
	{coPlan(X)}				SetCoPlan(Y)		{not coPlan(X), coPlan(Y)}
	
	// communication
	{true}					PlanShared()		{planShared}
	{true}					PlanRcvd()			{planRcvd}
	{jointActFinished(X)}	JointActFinsh()		{not jointActFinished(X), jointActFinished(1)}
	
	{true}					ResetComm()			{not planShared, not planRcvd}
	{jointActFinished(X)}	ResetJointAct()		{not jointActFinished(X), jointActFinished(0)}	

Beliefs:
// beliefs required for belief updates
	baseHP(0).
	ownCP(0).
	numEnemies(0).
	enemies(0).
	enemyBases(0).
	subgoal(null,0).
	curPriority(0).
	
	newPlan(0).
	currentPlan(0,[],0). // currentPlan(Id,Plan,Subgoal)
	
	coPlan(0).
	jointPlanFinished(0).
	
	wtaTresHoldToAttack(0.5).
	
	weakestEnemyBase(X) :- enemyBases(L), weakestBase(L,X,_).
	
	weakestBase([[Id,Min,_,_]],Id,Min).

	weakestBase([[H1,H2,_,_],[K1,K2,_,_]|T],New,M) :-
    	H2 =< K2,
    	weakestBase([[H1,H2,_,_]|T],New,M).

	weakestBase([[H1,H2,_,_],[K1,K2,_,_]|T],New,M) :-
    	H2 > K2,
    	weakestBase([[K1,K2,_,_]|T],New,M).

	selectPlan(PlanId, Pr, Subgoal) :-
		plan(PlanId, Pr, Subgoal, _ , _).

	
Plans:
	@starcraft(hello(),_)